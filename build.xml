<!--
     General purpose build script for web applications

     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web applicaiton.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.

-->


<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="CMU CS 15-437 HW4" default="compile" basedir=".">


<!-- ===================== Property Definitions =========================== -->


<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:

  * Definitions on the "ant" command line (ant -Dfoo=bar compile).

  * Definitions from a "build.properties" file in the top level
    source directory of this application.

  * Definitions from a "build.properties" file in the developer's
    home directory.

  * Default definitions in this build.xml file.

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

  <property file="build.properties"/>

<!-- ==================== File and Directory Names ======================== -->


<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

-->

  <property name="build.home"    value="${basedir}/build"/>
  <property name="dist.home"     value="${basedir}/dist"/>
  <property name="docs.home"     value="${basedir}/docs"/>
  <property name="src.home"      value="${basedir}/src"/>
  <property name="web.home"      value="${basedir}/web"/>
  <property name="tests.home"    value="${basedir}/tests"/>

<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">
    <fileset dir="${basedir}/lib" >
      <include name="*.jar" />
    </fileset>

    <!-- Include all elements that Tomcat 5.5 - 7.0 expose to applications -->
    <pathelement location="${catalina.home}/common/classes"/>
    <pathelement location="${catalina.home}/shared/classes"/>
    <fileset dir="${catalina.home}">
      <include name="common/endorsed/*.jar"/>
      <include name="common/lib/*.jar"/>
      <include name="shared/lib/*.jar"/>
      <include name="lib/*.jar"/>
    </fileset>
  </path>
	
<!-- =================== Init Target ====================================== -->
<!-- 
  Invokes the tstamp task, which sets the DSTAMP, TSTAMP, and TODAY 
  properties in the current project. By default, the DSTAMP property is in the 
  format "yyyyMMdd", TSTAMP is in the format "hhmm", and TODAY is in the 
  format "MMMM dd yyyy". As the manual says, it's a good practice to make 
  every other terget (those exposed to the user in the command line, that is) 
  dependant upon this init target
-->

  <target name="init">
	  <tstamp/>
  </target>

<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="init,clean,compile,dist"
   description="Clean directories, then compile and build distribution"/>

<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean" depends="init"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>

<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="init,prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <javac srcdir="${src.home}"
          destdir="${build.home}/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}"
includeantruntime="false">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/classes">
	<fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>

  </target>

<!-- ==================== Dist Target ================================== -->
<!--
  Generate the distribution .war file - this is the file you 
  deploy (by hand) to Tomcat or use the deploy target
-->

  <target name="dist" depends="init,compile,copyStatic,copyClasses,copyLibs"
   description="Generate a distribution of application and a war file.">

    <war destfile="${dist.home}/${appName}.war"
	webxml="${dist.home}/${appName}/WEB-INF/web.xml"
	basedir="${dist.home}/${appName}"/>
  </target>

<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" depends="init,compile"
   description="Create Javadoc API documentation">

    <mkdir dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
      <classpath refid="compile.classpath"/>
	  <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
	  <link href="http://java.sun.com/javaee/5/docs/api/"/>
    </javadoc>
  </target>


<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare" depends="init">
    <mkdir dir="${build.home}"/>
    <mkdir dir="${dist.home}"/>
    <mkdir dir="${build.home}/classes"/>
  </target>

<!-- ==================== CopyLibs Target ================================= -->

   <target name="copyLibs" description="Copies common libraries from ${basedir}/lib to a webapp's WEB-INF/lib/ directory.  Then copies any libraries from the app's own WEB-INF/lib directory, allowng per-project overrides. Requires the appName parameter to be set.">
    <property name="libDestDir" value="${dist.home}/${appName}/WEB-INF/lib/"/>
    <mkdir dir="${libDestDir}"/>
    <copy todir="${libDestDir}">
	<fileset dir="${basedir}/lib/"/>
    </copy>

    <!-- copy over app-specific libs and override libs, if available -->
    <property name="appLibDir" value="${web.home}/${appName}/WEB-INF/lib/"/>
    <available property="appLibDirAvailable" file="${appLibDir}" type="dir"/>
    <antcall target="copyAppLibs"/>
   </target>

   <target name="copyAppLibs" if="appLibDirAvailable">
    <copy todir="${libDestDir}" overwrite="true">
        <fileset dir="${appLibDir}"/>
    </copy>
   </target>

<!-- ==================== CopyStatic Target =============================== -->
  <target name="copyStatic" description="Copies the static content of a web application.  Application name gotten from param appName.">
   <copy todir="${dist.home}/${appName}">
     <fileset dir="${web.home}/${appName}">
       <exclude name="**/WEB-INF/**" />
     </fileset>
   </copy>
   <copy todir="${dist.home}/${appName}/WEB-INF">
     <fileset dir="${web.home}/${appName}/WEB-INF"/>
     <filterchain>
       <expandproperties/>
     </filterchain>
   </copy>
   <mkdir dir="${dist.home}/${appName}/WEB-INF/src"/>
   <copy todir="${dist.home}/${appName}/WEB-INF/src">
     <fileset dir="${src.home}"/>
   </copy>
   <mkdir dir="${dist.home}/${appName}/WEB-INF/tests"/>
   <copy todir="${dist.home}/${appName}/WEB-INF/tests">
     <fileset dir="${tests.home}"/>
   </copy>
  </target>

<!-- ==================== CopyClasses Target ============================= -->
  <target name="copyClasses" description="Copies the compiled classes in build into a web application's WEB-INF/classes folder.  Application name gotten from param appName.">
    <mkdir dir="${dist.home}/${appName}/WEB-INF/classes"/>
    <copy todir="${dist.home}/${appName}/WEB-INF/classes">
	  <fileset dir="${build.home}/classes" />
    </copy>
  </target>

<!-- ==================== Integration with Tomcat ======================= -->

  <!-- We need the Catalina jars for Tomcat -->
  <!-- You must copy these libraries into your ant installation -->
  <!-- see the script directory for both solutions -->
  <!-- or use the -lib argument to ant -->
  <path id="catalina-ant-classpath">
    <fileset dir="${catalina.home}/lib">
        <include name="catalina-ant.jar"/>
        <include name="tomcat-coyote.jar"/>
        <include name="tomcat-util.jar"/>
    </fileset>
    <fileset dir="${catalina.home}/bin">
        <include name="tomcat-juli.jar"/>
    </fileset>
  </path>

  <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"/>
  <taskdef name="list"      classname="org.apache.catalina.ant.ListTask"/>
  <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"/>
  <taskdef name="findleaks" classname="org.apache.catalina.ant.FindLeaksTask"/>
  <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"/>
  <taskdef name="start"     classname="org.apache.catalina.ant.StartTask"/>
  <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"/>
  <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"/>

  <target name="deploy" description="Install web application"
          depends="compile, dist">

	<property name="t" refid="catalina-ant-classpath"/>
	<echo message="${t}" />

    <deploy url="${catalina.url}" username="${catalina.username}" 
		password="${catalina.password}"
        path="${catalina.path}" war="file:${dist.home}${catalina.path}.war"/>
  </target>

  <target name="reload" description="Reload web application"
          depends="compile">
    <reload  url="${catalina.url}" username="${catalina.username}" 
	password="${catalina.password}"
        path="${catalina.path}"/>
  </target>

  <target name="undeploy" description="Remove web application">
    <undeploy url="${catalina.url}" username="${catalina.username}" 
	password="${catalina.password}"
        path="${catalina.path}"/>
  </target>

  <target name="redeploy" depends="undeploy,deploy" />
  
<!-- the end -->
</project>
